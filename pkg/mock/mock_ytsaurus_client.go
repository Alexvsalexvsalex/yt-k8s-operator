// Code generated by MockGen. DO NOT EDIT.
// Source: yt/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	guid "go.ytsaurus.tech/yt/go/guid"
	ypath "go.ytsaurus.tech/yt/go/ypath"
	yt "go.ytsaurus.tech/yt/go/yt"
)

// MockCypressClient is a mock of CypressClient interface.
type MockCypressClient struct {
	ctrl     *gomock.Controller
	recorder *MockCypressClientMockRecorder
}

// MockCypressClientMockRecorder is the mock recorder for MockCypressClient.
type MockCypressClientMockRecorder struct {
	mock *MockCypressClient
}

// NewMockCypressClient creates a new mock instance.
func NewMockCypressClient(ctrl *gomock.Controller) *MockCypressClient {
	mock := &MockCypressClient{ctrl: ctrl}
	mock.recorder = &MockCypressClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCypressClient) EXPECT() *MockCypressClientMockRecorder {
	return m.recorder
}

// CopyNode mocks base method.
func (m *MockCypressClient) CopyNode(ctx context.Context, src, dst ypath.YPath, options *yt.CopyNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyNode indicates an expected call of CopyNode.
func (mr *MockCypressClientMockRecorder) CopyNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyNode", reflect.TypeOf((*MockCypressClient)(nil).CopyNode), ctx, src, dst, options)
}

// CreateNode mocks base method.
func (m *MockCypressClient) CreateNode(ctx context.Context, path ypath.YPath, typ yt.NodeType, options *yt.CreateNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, path, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockCypressClientMockRecorder) CreateNode(ctx, path, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockCypressClient)(nil).CreateNode), ctx, path, typ, options)
}

// CreateObject mocks base method.
func (m *MockCypressClient) CreateObject(ctx context.Context, typ yt.NodeType, options *yt.CreateObjectOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockCypressClientMockRecorder) CreateObject(ctx, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockCypressClient)(nil).CreateObject), ctx, typ, options)
}

// GetNode mocks base method.
func (m *MockCypressClient) GetNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockCypressClientMockRecorder) GetNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockCypressClient)(nil).GetNode), ctx, path, result, options)
}

// LinkNode mocks base method.
func (m *MockCypressClient) LinkNode(ctx context.Context, target, link ypath.YPath, options *yt.LinkNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNode", ctx, target, link, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNode indicates an expected call of LinkNode.
func (mr *MockCypressClientMockRecorder) LinkNode(ctx, target, link, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNode", reflect.TypeOf((*MockCypressClient)(nil).LinkNode), ctx, target, link, options)
}

// ListNode mocks base method.
func (m *MockCypressClient) ListNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.ListNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNode indicates an expected call of ListNode.
func (mr *MockCypressClientMockRecorder) ListNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockCypressClient)(nil).ListNode), ctx, path, result, options)
}

// MoveNode mocks base method.
func (m *MockCypressClient) MoveNode(ctx context.Context, src, dst ypath.YPath, options *yt.MoveNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveNode indicates an expected call of MoveNode.
func (mr *MockCypressClientMockRecorder) MoveNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveNode", reflect.TypeOf((*MockCypressClient)(nil).MoveNode), ctx, src, dst, options)
}

// MultisetAttributes mocks base method.
func (m *MockCypressClient) MultisetAttributes(ctx context.Context, path ypath.YPath, attributes map[string]interface{}, options *yt.MultisetAttributesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultisetAttributes", ctx, path, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultisetAttributes indicates an expected call of MultisetAttributes.
func (mr *MockCypressClientMockRecorder) MultisetAttributes(ctx, path, attributes, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultisetAttributes", reflect.TypeOf((*MockCypressClient)(nil).MultisetAttributes), ctx, path, attributes, options)
}

// NodeExists mocks base method.
func (m *MockCypressClient) NodeExists(ctx context.Context, path ypath.YPath, options *yt.NodeExistsOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExists", ctx, path, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExists indicates an expected call of NodeExists.
func (mr *MockCypressClientMockRecorder) NodeExists(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExists", reflect.TypeOf((*MockCypressClient)(nil).NodeExists), ctx, path, options)
}

// RemoveNode mocks base method.
func (m *MockCypressClient) RemoveNode(ctx context.Context, path ypath.YPath, options *yt.RemoveNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockCypressClientMockRecorder) RemoveNode(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockCypressClient)(nil).RemoveNode), ctx, path, options)
}

// SetNode mocks base method.
func (m *MockCypressClient) SetNode(ctx context.Context, path ypath.YPath, value interface{}, options *yt.SetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNode", ctx, path, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNode indicates an expected call of SetNode.
func (mr *MockCypressClientMockRecorder) SetNode(ctx, path, value, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNode", reflect.TypeOf((*MockCypressClient)(nil).SetNode), ctx, path, value, options)
}

// MockLowLevelTxClient is a mock of LowLevelTxClient interface.
type MockLowLevelTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockLowLevelTxClientMockRecorder
}

// MockLowLevelTxClientMockRecorder is the mock recorder for MockLowLevelTxClient.
type MockLowLevelTxClientMockRecorder struct {
	mock *MockLowLevelTxClient
}

// NewMockLowLevelTxClient creates a new mock instance.
func NewMockLowLevelTxClient(ctrl *gomock.Controller) *MockLowLevelTxClient {
	mock := &MockLowLevelTxClient{ctrl: ctrl}
	mock.recorder = &MockLowLevelTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLowLevelTxClient) EXPECT() *MockLowLevelTxClientMockRecorder {
	return m.recorder
}

// AbortTx mocks base method.
func (m *MockLowLevelTxClient) AbortTx(ctx context.Context, id yt.TxID, options *yt.AbortTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTx indicates an expected call of AbortTx.
func (mr *MockLowLevelTxClientMockRecorder) AbortTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTx", reflect.TypeOf((*MockLowLevelTxClient)(nil).AbortTx), ctx, id, options)
}

// CommitTx mocks base method.
func (m *MockLowLevelTxClient) CommitTx(ctx context.Context, id yt.TxID, options *yt.CommitTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockLowLevelTxClientMockRecorder) CommitTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockLowLevelTxClient)(nil).CommitTx), ctx, id, options)
}

// PingTx mocks base method.
func (m *MockLowLevelTxClient) PingTx(ctx context.Context, id yt.TxID, options *yt.PingTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingTx indicates an expected call of PingTx.
func (mr *MockLowLevelTxClientMockRecorder) PingTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingTx", reflect.TypeOf((*MockLowLevelTxClient)(nil).PingTx), ctx, id, options)
}

// StartTabletTx mocks base method.
func (m *MockLowLevelTxClient) StartTabletTx(ctx context.Context, options *yt.StartTabletTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTabletTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTabletTx indicates an expected call of StartTabletTx.
func (mr *MockLowLevelTxClientMockRecorder) StartTabletTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTabletTx", reflect.TypeOf((*MockLowLevelTxClient)(nil).StartTabletTx), ctx, options)
}

// StartTx mocks base method.
func (m *MockLowLevelTxClient) StartTx(ctx context.Context, options *yt.StartTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockLowLevelTxClientMockRecorder) StartTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockLowLevelTxClient)(nil).StartTx), ctx, options)
}

// MockFileClient is a mock of FileClient interface.
type MockFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileClientMockRecorder
}

// MockFileClientMockRecorder is the mock recorder for MockFileClient.
type MockFileClientMockRecorder struct {
	mock *MockFileClient
}

// NewMockFileClient creates a new mock instance.
func NewMockFileClient(ctrl *gomock.Controller) *MockFileClient {
	mock := &MockFileClient{ctrl: ctrl}
	mock.recorder = &MockFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileClient) EXPECT() *MockFileClientMockRecorder {
	return m.recorder
}

// GetFileFromCache mocks base method.
func (m *MockFileClient) GetFileFromCache(ctx context.Context, md5 string, options *yt.GetFileFromCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromCache", ctx, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromCache indicates an expected call of GetFileFromCache.
func (mr *MockFileClientMockRecorder) GetFileFromCache(ctx, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromCache", reflect.TypeOf((*MockFileClient)(nil).GetFileFromCache), ctx, md5, options)
}

// PutFileToCache mocks base method.
func (m *MockFileClient) PutFileToCache(ctx context.Context, path ypath.YPath, md5 string, options *yt.PutFileToCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToCache", ctx, path, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileToCache indicates an expected call of PutFileToCache.
func (mr *MockFileClientMockRecorder) PutFileToCache(ctx, path, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToCache", reflect.TypeOf((*MockFileClient)(nil).PutFileToCache), ctx, path, md5, options)
}

// ReadFile mocks base method.
func (m *MockFileClient) ReadFile(ctx context.Context, path ypath.YPath, options *yt.ReadFileOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileClientMockRecorder) ReadFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileClient)(nil).ReadFile), ctx, path, options)
}

// WriteFile mocks base method.
func (m *MockFileClient) WriteFile(ctx context.Context, path ypath.YPath, options *yt.WriteFileOptions) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, path, options)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileClientMockRecorder) WriteFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileClient)(nil).WriteFile), ctx, path, options)
}

// MockTableClient is a mock of TableClient interface.
type MockTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockTableClientMockRecorder
}

// MockTableClientMockRecorder is the mock recorder for MockTableClient.
type MockTableClientMockRecorder struct {
	mock *MockTableClient
}

// NewMockTableClient creates a new mock instance.
func NewMockTableClient(ctrl *gomock.Controller) *MockTableClient {
	mock := &MockTableClient{ctrl: ctrl}
	mock.recorder = &MockTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableClient) EXPECT() *MockTableClientMockRecorder {
	return m.recorder
}

// ReadTable mocks base method.
func (m *MockTableClient) ReadTable(ctx context.Context, path ypath.YPath, options *yt.ReadTableOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTable indicates an expected call of ReadTable.
func (mr *MockTableClientMockRecorder) ReadTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTable", reflect.TypeOf((*MockTableClient)(nil).ReadTable), ctx, path, options)
}

// WriteTable mocks base method.
func (m *MockTableClient) WriteTable(ctx context.Context, path ypath.YPath, options *yt.WriteTableOptions) (yt.TableWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTable indicates an expected call of WriteTable.
func (mr *MockTableClientMockRecorder) WriteTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTable", reflect.TypeOf((*MockTableClient)(nil).WriteTable), ctx, path, options)
}

// MockOperationStartClient is a mock of OperationStartClient interface.
type MockOperationStartClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperationStartClientMockRecorder
}

// MockOperationStartClientMockRecorder is the mock recorder for MockOperationStartClient.
type MockOperationStartClientMockRecorder struct {
	mock *MockOperationStartClient
}

// NewMockOperationStartClient creates a new mock instance.
func NewMockOperationStartClient(ctrl *gomock.Controller) *MockOperationStartClient {
	mock := &MockOperationStartClient{ctrl: ctrl}
	mock.recorder = &MockOperationStartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationStartClient) EXPECT() *MockOperationStartClientMockRecorder {
	return m.recorder
}

// StartOperation mocks base method.
func (m *MockOperationStartClient) StartOperation(ctx context.Context, opType yt.OperationType, spec interface{}, options *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", ctx, opType, spec, options)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockOperationStartClientMockRecorder) StartOperation(ctx, opType, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockOperationStartClient)(nil).StartOperation), ctx, opType, spec, options)
}

// MockLowLevelSchedulerClient is a mock of LowLevelSchedulerClient interface.
type MockLowLevelSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLowLevelSchedulerClientMockRecorder
}

// MockLowLevelSchedulerClientMockRecorder is the mock recorder for MockLowLevelSchedulerClient.
type MockLowLevelSchedulerClientMockRecorder struct {
	mock *MockLowLevelSchedulerClient
}

// NewMockLowLevelSchedulerClient creates a new mock instance.
func NewMockLowLevelSchedulerClient(ctrl *gomock.Controller) *MockLowLevelSchedulerClient {
	mock := &MockLowLevelSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockLowLevelSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLowLevelSchedulerClient) EXPECT() *MockLowLevelSchedulerClientMockRecorder {
	return m.recorder
}

// AbortOperation mocks base method.
func (m *MockLowLevelSchedulerClient) AbortOperation(ctx context.Context, opID yt.OperationID, options *yt.AbortOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortOperation indicates an expected call of AbortOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) AbortOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).AbortOperation), ctx, opID, options)
}

// CompleteOperation mocks base method.
func (m *MockLowLevelSchedulerClient) CompleteOperation(ctx context.Context, opID yt.OperationID, options *yt.CompleteOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOperation indicates an expected call of CompleteOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) CompleteOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).CompleteOperation), ctx, opID, options)
}

// GetJobStderr mocks base method.
func (m *MockLowLevelSchedulerClient) GetJobStderr(ctx context.Context, opID yt.OperationID, jobID yt.JobID, options *yt.GetJobStderrOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStderr", ctx, opID, jobID, options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStderr indicates an expected call of GetJobStderr.
func (mr *MockLowLevelSchedulerClientMockRecorder) GetJobStderr(ctx, opID, jobID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStderr", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).GetJobStderr), ctx, opID, jobID, options)
}

// GetOperation mocks base method.
func (m *MockLowLevelSchedulerClient) GetOperation(ctx context.Context, opID yt.OperationID, options *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, opID, options)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) GetOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).GetOperation), ctx, opID, options)
}

// ListJobs mocks base method.
func (m *MockLowLevelSchedulerClient) ListJobs(ctx context.Context, opID yt.OperationID, options *yt.ListJobsOptions) (*yt.ListJobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, opID, options)
	ret0, _ := ret[0].(*yt.ListJobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockLowLevelSchedulerClientMockRecorder) ListJobs(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).ListJobs), ctx, opID, options)
}

// ListOperations mocks base method.
func (m *MockLowLevelSchedulerClient) ListOperations(ctx context.Context, options *yt.ListOperationsOptions) (*yt.ListOperationsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", ctx, options)
	ret0, _ := ret[0].(*yt.ListOperationsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockLowLevelSchedulerClientMockRecorder) ListOperations(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).ListOperations), ctx, options)
}

// ResumeOperation mocks base method.
func (m *MockLowLevelSchedulerClient) ResumeOperation(ctx context.Context, opID yt.OperationID, options *yt.ResumeOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeOperation indicates an expected call of ResumeOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) ResumeOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).ResumeOperation), ctx, opID, options)
}

// StartOperation mocks base method.
func (m *MockLowLevelSchedulerClient) StartOperation(ctx context.Context, opType yt.OperationType, spec interface{}, options *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", ctx, opType, spec, options)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) StartOperation(ctx, opType, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).StartOperation), ctx, opType, spec, options)
}

// SuspendOperation mocks base method.
func (m *MockLowLevelSchedulerClient) SuspendOperation(ctx context.Context, opID yt.OperationID, options *yt.SuspendOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendOperation indicates an expected call of SuspendOperation.
func (mr *MockLowLevelSchedulerClientMockRecorder) SuspendOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendOperation", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).SuspendOperation), ctx, opID, options)
}

// UpdateOperationParameters mocks base method.
func (m *MockLowLevelSchedulerClient) UpdateOperationParameters(ctx context.Context, opID yt.OperationID, params interface{}, options *yt.UpdateOperationParametersOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationParameters", ctx, opID, params, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationParameters indicates an expected call of UpdateOperationParameters.
func (mr *MockLowLevelSchedulerClientMockRecorder) UpdateOperationParameters(ctx, opID, params, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationParameters", reflect.TypeOf((*MockLowLevelSchedulerClient)(nil).UpdateOperationParameters), ctx, opID, params, options)
}

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockAdminClient) AddMember(ctx context.Context, group, member string, options *yt.AddMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockAdminClientMockRecorder) AddMember(ctx, group, member, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockAdminClient)(nil).AddMember), ctx, group, member, options)
}

// CheckPermission mocks base method.
func (m *MockAdminClient) CheckPermission(ctx context.Context, user string, permission yt.Permission, path ypath.YPath, options *yt.CheckPermissionOptions) (*yt.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, user, permission, path, options)
	ret0, _ := ret[0].(*yt.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockAdminClientMockRecorder) CheckPermission(ctx, user, permission, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockAdminClient)(nil).CheckPermission), ctx, user, permission, path, options)
}

// DestroyChunkLocations mocks base method.
func (m *MockAdminClient) DestroyChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.DestroyChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.DestroyChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyChunkLocations indicates an expected call of DestroyChunkLocations.
func (mr *MockAdminClientMockRecorder) DestroyChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyChunkLocations", reflect.TypeOf((*MockAdminClient)(nil).DestroyChunkLocations), ctx, nodeAddress, locationUuids)
}

// DisableChunkLocations mocks base method.
func (m *MockAdminClient) DisableChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.DisableChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.DisableChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableChunkLocations indicates an expected call of DisableChunkLocations.
func (mr *MockAdminClientMockRecorder) DisableChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableChunkLocations", reflect.TypeOf((*MockAdminClient)(nil).DisableChunkLocations), ctx, nodeAddress, locationUuids)
}

// RemoveMember mocks base method.
func (m *MockAdminClient) RemoveMember(ctx context.Context, group, member string, options *yt.RemoveMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockAdminClientMockRecorder) RemoveMember(ctx, group, member, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockAdminClient)(nil).RemoveMember), ctx, group, member, options)
}

// ResurrectChunkLocations mocks base method.
func (m *MockAdminClient) ResurrectChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.ResurrectChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResurrectChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.ResurrectChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResurrectChunkLocations indicates an expected call of ResurrectChunkLocations.
func (mr *MockAdminClientMockRecorder) ResurrectChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResurrectChunkLocations", reflect.TypeOf((*MockAdminClient)(nil).ResurrectChunkLocations), ctx, nodeAddress, locationUuids)
}

// TransferAccountResources mocks base method.
func (m *MockAdminClient) TransferAccountResources(ctx context.Context, srcAccount, dstAccount string, resourceDelta interface{}, options *yt.TransferAccountResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAccountResources", ctx, srcAccount, dstAccount, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAccountResources indicates an expected call of TransferAccountResources.
func (mr *MockAdminClientMockRecorder) TransferAccountResources(ctx, srcAccount, dstAccount, resourceDelta, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAccountResources", reflect.TypeOf((*MockAdminClient)(nil).TransferAccountResources), ctx, srcAccount, dstAccount, resourceDelta, options)
}

// TransferPoolResources mocks base method.
func (m *MockAdminClient) TransferPoolResources(ctx context.Context, srcPool, dstPool, poolTree string, resourceDelta interface{}, options *yt.TransferPoolResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPoolResources", ctx, srcPool, dstPool, poolTree, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPoolResources indicates an expected call of TransferPoolResources.
func (mr *MockAdminClientMockRecorder) TransferPoolResources(ctx, srcPool, dstPool, poolTree, resourceDelta, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPoolResources", reflect.TypeOf((*MockAdminClient)(nil).TransferPoolResources), ctx, srcPool, dstPool, poolTree, resourceDelta, options)
}

// MockLockClient is a mock of LockClient interface.
type MockLockClient struct {
	ctrl     *gomock.Controller
	recorder *MockLockClientMockRecorder
}

// MockLockClientMockRecorder is the mock recorder for MockLockClient.
type MockLockClientMockRecorder struct {
	mock *MockLockClient
}

// NewMockLockClient creates a new mock instance.
func NewMockLockClient(ctrl *gomock.Controller) *MockLockClient {
	mock := &MockLockClient{ctrl: ctrl}
	mock.recorder = &MockLockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockClient) EXPECT() *MockLockClientMockRecorder {
	return m.recorder
}

// LockNode mocks base method.
func (m *MockLockClient) LockNode(ctx context.Context, path ypath.YPath, mode yt.LockMode, options *yt.LockNodeOptions) (yt.LockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNode", ctx, path, mode, options)
	ret0, _ := ret[0].(yt.LockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNode indicates an expected call of LockNode.
func (mr *MockLockClientMockRecorder) LockNode(ctx, path, mode, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNode", reflect.TypeOf((*MockLockClient)(nil).LockNode), ctx, path, mode, options)
}

// UnlockNode mocks base method.
func (m *MockLockClient) UnlockNode(ctx context.Context, path ypath.YPath, options *yt.UnlockNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockNode indicates an expected call of UnlockNode.
func (mr *MockLockClientMockRecorder) UnlockNode(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockNode", reflect.TypeOf((*MockLockClient)(nil).UnlockNode), ctx, path, options)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTx) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockTxMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTx)(nil).Abort))
}

// BeginTx mocks base method.
func (m *MockTx) BeginTx(ctx context.Context, options *yt.StartTxOptions) (yt.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(yt.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTxMockRecorder) BeginTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTx)(nil).BeginTx), ctx, options)
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// CopyNode mocks base method.
func (m *MockTx) CopyNode(ctx context.Context, src, dst ypath.YPath, options *yt.CopyNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyNode indicates an expected call of CopyNode.
func (mr *MockTxMockRecorder) CopyNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyNode", reflect.TypeOf((*MockTx)(nil).CopyNode), ctx, src, dst, options)
}

// CreateNode mocks base method.
func (m *MockTx) CreateNode(ctx context.Context, path ypath.YPath, typ yt.NodeType, options *yt.CreateNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, path, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockTxMockRecorder) CreateNode(ctx, path, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockTx)(nil).CreateNode), ctx, path, typ, options)
}

// CreateObject mocks base method.
func (m *MockTx) CreateObject(ctx context.Context, typ yt.NodeType, options *yt.CreateObjectOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockTxMockRecorder) CreateObject(ctx, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockTx)(nil).CreateObject), ctx, typ, options)
}

// Finished mocks base method.
func (m *MockTx) Finished() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Finished indicates an expected call of Finished.
func (mr *MockTxMockRecorder) Finished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockTx)(nil).Finished))
}

// GetFileFromCache mocks base method.
func (m *MockTx) GetFileFromCache(ctx context.Context, md5 string, options *yt.GetFileFromCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromCache", ctx, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromCache indicates an expected call of GetFileFromCache.
func (mr *MockTxMockRecorder) GetFileFromCache(ctx, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromCache", reflect.TypeOf((*MockTx)(nil).GetFileFromCache), ctx, md5, options)
}

// GetNode mocks base method.
func (m *MockTx) GetNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockTxMockRecorder) GetNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockTx)(nil).GetNode), ctx, path, result, options)
}

// ID mocks base method.
func (m *MockTx) ID() yt.TxID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(yt.TxID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTxMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTx)(nil).ID))
}

// LinkNode mocks base method.
func (m *MockTx) LinkNode(ctx context.Context, target, link ypath.YPath, options *yt.LinkNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNode", ctx, target, link, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNode indicates an expected call of LinkNode.
func (mr *MockTxMockRecorder) LinkNode(ctx, target, link, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNode", reflect.TypeOf((*MockTx)(nil).LinkNode), ctx, target, link, options)
}

// ListNode mocks base method.
func (m *MockTx) ListNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.ListNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNode indicates an expected call of ListNode.
func (mr *MockTxMockRecorder) ListNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockTx)(nil).ListNode), ctx, path, result, options)
}

// LockNode mocks base method.
func (m *MockTx) LockNode(ctx context.Context, path ypath.YPath, mode yt.LockMode, options *yt.LockNodeOptions) (yt.LockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNode", ctx, path, mode, options)
	ret0, _ := ret[0].(yt.LockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNode indicates an expected call of LockNode.
func (mr *MockTxMockRecorder) LockNode(ctx, path, mode, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNode", reflect.TypeOf((*MockTx)(nil).LockNode), ctx, path, mode, options)
}

// MoveNode mocks base method.
func (m *MockTx) MoveNode(ctx context.Context, src, dst ypath.YPath, options *yt.MoveNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveNode indicates an expected call of MoveNode.
func (mr *MockTxMockRecorder) MoveNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveNode", reflect.TypeOf((*MockTx)(nil).MoveNode), ctx, src, dst, options)
}

// MultisetAttributes mocks base method.
func (m *MockTx) MultisetAttributes(ctx context.Context, path ypath.YPath, attributes map[string]interface{}, options *yt.MultisetAttributesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultisetAttributes", ctx, path, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultisetAttributes indicates an expected call of MultisetAttributes.
func (mr *MockTxMockRecorder) MultisetAttributes(ctx, path, attributes, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultisetAttributes", reflect.TypeOf((*MockTx)(nil).MultisetAttributes), ctx, path, attributes, options)
}

// NodeExists mocks base method.
func (m *MockTx) NodeExists(ctx context.Context, path ypath.YPath, options *yt.NodeExistsOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExists", ctx, path, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExists indicates an expected call of NodeExists.
func (mr *MockTxMockRecorder) NodeExists(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExists", reflect.TypeOf((*MockTx)(nil).NodeExists), ctx, path, options)
}

// PutFileToCache mocks base method.
func (m *MockTx) PutFileToCache(ctx context.Context, path ypath.YPath, md5 string, options *yt.PutFileToCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToCache", ctx, path, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileToCache indicates an expected call of PutFileToCache.
func (mr *MockTxMockRecorder) PutFileToCache(ctx, path, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToCache", reflect.TypeOf((*MockTx)(nil).PutFileToCache), ctx, path, md5, options)
}

// ReadFile mocks base method.
func (m *MockTx) ReadFile(ctx context.Context, path ypath.YPath, options *yt.ReadFileOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockTxMockRecorder) ReadFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockTx)(nil).ReadFile), ctx, path, options)
}

// ReadTable mocks base method.
func (m *MockTx) ReadTable(ctx context.Context, path ypath.YPath, options *yt.ReadTableOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTable indicates an expected call of ReadTable.
func (mr *MockTxMockRecorder) ReadTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTable", reflect.TypeOf((*MockTx)(nil).ReadTable), ctx, path, options)
}

// RemoveNode mocks base method.
func (m *MockTx) RemoveNode(ctx context.Context, path ypath.YPath, options *yt.RemoveNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockTxMockRecorder) RemoveNode(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockTx)(nil).RemoveNode), ctx, path, options)
}

// SetNode mocks base method.
func (m *MockTx) SetNode(ctx context.Context, path ypath.YPath, value interface{}, options *yt.SetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNode", ctx, path, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNode indicates an expected call of SetNode.
func (mr *MockTxMockRecorder) SetNode(ctx, path, value, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNode", reflect.TypeOf((*MockTx)(nil).SetNode), ctx, path, value, options)
}

// StartOperation mocks base method.
func (m *MockTx) StartOperation(ctx context.Context, opType yt.OperationType, spec interface{}, options *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", ctx, opType, spec, options)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockTxMockRecorder) StartOperation(ctx, opType, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockTx)(nil).StartOperation), ctx, opType, spec, options)
}

// UnlockNode mocks base method.
func (m *MockTx) UnlockNode(ctx context.Context, path ypath.YPath, options *yt.UnlockNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockNode indicates an expected call of UnlockNode.
func (mr *MockTxMockRecorder) UnlockNode(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockNode", reflect.TypeOf((*MockTx)(nil).UnlockNode), ctx, path, options)
}

// WriteFile mocks base method.
func (m *MockTx) WriteFile(ctx context.Context, path ypath.YPath, options *yt.WriteFileOptions) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, path, options)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockTxMockRecorder) WriteFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockTx)(nil).WriteFile), ctx, path, options)
}

// WriteTable mocks base method.
func (m *MockTx) WriteTable(ctx context.Context, path ypath.YPath, options *yt.WriteTableOptions) (yt.TableWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTable indicates an expected call of WriteTable.
func (mr *MockTxMockRecorder) WriteTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTable", reflect.TypeOf((*MockTx)(nil).WriteTable), ctx, path, options)
}

// MockTabletClient is a mock of TabletClient interface.
type MockTabletClient struct {
	ctrl     *gomock.Controller
	recorder *MockTabletClientMockRecorder
}

// MockTabletClientMockRecorder is the mock recorder for MockTabletClient.
type MockTabletClientMockRecorder struct {
	mock *MockTabletClient
}

// NewMockTabletClient creates a new mock instance.
func NewMockTabletClient(ctrl *gomock.Controller) *MockTabletClient {
	mock := &MockTabletClient{ctrl: ctrl}
	mock.recorder = &MockTabletClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTabletClient) EXPECT() *MockTabletClientMockRecorder {
	return m.recorder
}

// DeleteRows mocks base method.
func (m *MockTabletClient) DeleteRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.DeleteRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRows", ctx, path, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRows indicates an expected call of DeleteRows.
func (mr *MockTabletClientMockRecorder) DeleteRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRows", reflect.TypeOf((*MockTabletClient)(nil).DeleteRows), ctx, path, keys, options)
}

// InsertRowBatch mocks base method.
func (m *MockTabletClient) InsertRowBatch(ctx context.Context, path ypath.Path, rowBatch yt.RowBatch, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowBatch", ctx, path, rowBatch, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowBatch indicates an expected call of InsertRowBatch.
func (mr *MockTabletClientMockRecorder) InsertRowBatch(ctx, path, rowBatch, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowBatch", reflect.TypeOf((*MockTabletClient)(nil).InsertRowBatch), ctx, path, rowBatch, options)
}

// InsertRows mocks base method.
func (m *MockTabletClient) InsertRows(ctx context.Context, path ypath.Path, rows []interface{}, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRows", ctx, path, rows, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRows indicates an expected call of InsertRows.
func (mr *MockTabletClientMockRecorder) InsertRows(ctx, path, rows, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRows", reflect.TypeOf((*MockTabletClient)(nil).InsertRows), ctx, path, rows, options)
}

// LockRows mocks base method.
func (m *MockTabletClient) LockRows(ctx context.Context, path ypath.Path, locks []string, lockType yt.LockType, keys []interface{}, options *yt.LockRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRows", ctx, path, locks, lockType, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRows indicates an expected call of LockRows.
func (mr *MockTabletClientMockRecorder) LockRows(ctx, path, locks, lockType, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRows", reflect.TypeOf((*MockTabletClient)(nil).LockRows), ctx, path, locks, lockType, keys, options)
}

// LookupRows mocks base method.
func (m *MockTabletClient) LookupRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.LookupRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRows", ctx, path, keys, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRows indicates an expected call of LookupRows.
func (mr *MockTabletClientMockRecorder) LookupRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRows", reflect.TypeOf((*MockTabletClient)(nil).LookupRows), ctx, path, keys, options)
}

// SelectRows mocks base method.
func (m *MockTabletClient) SelectRows(ctx context.Context, query string, options *yt.SelectRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRows", ctx, query, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRows indicates an expected call of SelectRows.
func (mr *MockTabletClientMockRecorder) SelectRows(ctx, query, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRows", reflect.TypeOf((*MockTabletClient)(nil).SelectRows), ctx, query, options)
}

// MockMountClient is a mock of MountClient interface.
type MockMountClient struct {
	ctrl     *gomock.Controller
	recorder *MockMountClientMockRecorder
}

// MockMountClientMockRecorder is the mock recorder for MockMountClient.
type MockMountClientMockRecorder struct {
	mock *MockMountClient
}

// NewMockMountClient creates a new mock instance.
func NewMockMountClient(ctrl *gomock.Controller) *MockMountClient {
	mock := &MockMountClient{ctrl: ctrl}
	mock.recorder = &MockMountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMountClient) EXPECT() *MockMountClientMockRecorder {
	return m.recorder
}

// AlterTable mocks base method.
func (m *MockMountClient) AlterTable(ctx context.Context, path ypath.Path, options *yt.AlterTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTable indicates an expected call of AlterTable.
func (mr *MockMountClientMockRecorder) AlterTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTable", reflect.TypeOf((*MockMountClient)(nil).AlterTable), ctx, path, options)
}

// AlterTableReplica mocks base method.
func (m *MockMountClient) AlterTableReplica(ctx context.Context, id yt.NodeID, options *yt.AlterTableReplicaOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTableReplica", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTableReplica indicates an expected call of AlterTableReplica.
func (mr *MockMountClientMockRecorder) AlterTableReplica(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTableReplica", reflect.TypeOf((*MockMountClient)(nil).AlterTableReplica), ctx, id, options)
}

// FreezeTable mocks base method.
func (m *MockMountClient) FreezeTable(ctx context.Context, path ypath.Path, options *yt.FreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreezeTable indicates an expected call of FreezeTable.
func (mr *MockMountClientMockRecorder) FreezeTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeTable", reflect.TypeOf((*MockMountClient)(nil).FreezeTable), ctx, path, options)
}

// MountTable mocks base method.
func (m *MockMountClient) MountTable(ctx context.Context, path ypath.Path, options *yt.MountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountTable indicates an expected call of MountTable.
func (mr *MockMountClientMockRecorder) MountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountTable", reflect.TypeOf((*MockMountClient)(nil).MountTable), ctx, path, options)
}

// RemountTable mocks base method.
func (m *MockMountClient) RemountTable(ctx context.Context, path ypath.Path, options *yt.RemountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemountTable indicates an expected call of RemountTable.
func (mr *MockMountClientMockRecorder) RemountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemountTable", reflect.TypeOf((*MockMountClient)(nil).RemountTable), ctx, path, options)
}

// ReshardTable mocks base method.
func (m *MockMountClient) ReshardTable(ctx context.Context, path ypath.Path, options *yt.ReshardTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReshardTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReshardTable indicates an expected call of ReshardTable.
func (mr *MockMountClientMockRecorder) ReshardTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReshardTable", reflect.TypeOf((*MockMountClient)(nil).ReshardTable), ctx, path, options)
}

// UnfreezeTable mocks base method.
func (m *MockMountClient) UnfreezeTable(ctx context.Context, path ypath.Path, options *yt.UnfreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfreezeTable indicates an expected call of UnfreezeTable.
func (mr *MockMountClientMockRecorder) UnfreezeTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeTable", reflect.TypeOf((*MockMountClient)(nil).UnfreezeTable), ctx, path, options)
}

// UnmountTable mocks base method.
func (m *MockMountClient) UnmountTable(ctx context.Context, path ypath.Path, options *yt.UnmountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountTable indicates an expected call of UnmountTable.
func (mr *MockMountClientMockRecorder) UnmountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountTable", reflect.TypeOf((*MockMountClient)(nil).UnmountTable), ctx, path, options)
}

// MockTabletTx is a mock of TabletTx interface.
type MockTabletTx struct {
	ctrl     *gomock.Controller
	recorder *MockTabletTxMockRecorder
}

// MockTabletTxMockRecorder is the mock recorder for MockTabletTx.
type MockTabletTxMockRecorder struct {
	mock *MockTabletTx
}

// NewMockTabletTx creates a new mock instance.
func NewMockTabletTx(ctrl *gomock.Controller) *MockTabletTx {
	mock := &MockTabletTx{ctrl: ctrl}
	mock.recorder = &MockTabletTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTabletTx) EXPECT() *MockTabletTxMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTabletTx) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockTabletTxMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTabletTx)(nil).Abort))
}

// Commit mocks base method.
func (m *MockTabletTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTabletTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTabletTx)(nil).Commit))
}

// DeleteRows mocks base method.
func (m *MockTabletTx) DeleteRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.DeleteRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRows", ctx, path, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRows indicates an expected call of DeleteRows.
func (mr *MockTabletTxMockRecorder) DeleteRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRows", reflect.TypeOf((*MockTabletTx)(nil).DeleteRows), ctx, path, keys, options)
}

// ID mocks base method.
func (m *MockTabletTx) ID() yt.TxID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(yt.TxID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTabletTxMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTabletTx)(nil).ID))
}

// InsertRowBatch mocks base method.
func (m *MockTabletTx) InsertRowBatch(ctx context.Context, path ypath.Path, rowBatch yt.RowBatch, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowBatch", ctx, path, rowBatch, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowBatch indicates an expected call of InsertRowBatch.
func (mr *MockTabletTxMockRecorder) InsertRowBatch(ctx, path, rowBatch, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowBatch", reflect.TypeOf((*MockTabletTx)(nil).InsertRowBatch), ctx, path, rowBatch, options)
}

// InsertRows mocks base method.
func (m *MockTabletTx) InsertRows(ctx context.Context, path ypath.Path, rows []interface{}, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRows", ctx, path, rows, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRows indicates an expected call of InsertRows.
func (mr *MockTabletTxMockRecorder) InsertRows(ctx, path, rows, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRows", reflect.TypeOf((*MockTabletTx)(nil).InsertRows), ctx, path, rows, options)
}

// LockRows mocks base method.
func (m *MockTabletTx) LockRows(ctx context.Context, path ypath.Path, locks []string, lockType yt.LockType, keys []interface{}, options *yt.LockRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRows", ctx, path, locks, lockType, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRows indicates an expected call of LockRows.
func (mr *MockTabletTxMockRecorder) LockRows(ctx, path, locks, lockType, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRows", reflect.TypeOf((*MockTabletTx)(nil).LockRows), ctx, path, locks, lockType, keys, options)
}

// LookupRows mocks base method.
func (m *MockTabletTx) LookupRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.LookupRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRows", ctx, path, keys, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRows indicates an expected call of LookupRows.
func (mr *MockTabletTxMockRecorder) LookupRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRows", reflect.TypeOf((*MockTabletTx)(nil).LookupRows), ctx, path, keys, options)
}

// SelectRows mocks base method.
func (m *MockTabletTx) SelectRows(ctx context.Context, query string, options *yt.SelectRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRows", ctx, query, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRows indicates an expected call of SelectRows.
func (mr *MockTabletTxMockRecorder) SelectRows(ctx, query, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRows", reflect.TypeOf((*MockTabletTx)(nil).SelectRows), ctx, query, options)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AbortOperation mocks base method.
func (m *MockClient) AbortOperation(ctx context.Context, opID yt.OperationID, options *yt.AbortOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortOperation indicates an expected call of AbortOperation.
func (mr *MockClientMockRecorder) AbortOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortOperation", reflect.TypeOf((*MockClient)(nil).AbortOperation), ctx, opID, options)
}

// AbortTx mocks base method.
func (m *MockClient) AbortTx(ctx context.Context, id yt.TxID, options *yt.AbortTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTx indicates an expected call of AbortTx.
func (mr *MockClientMockRecorder) AbortTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTx", reflect.TypeOf((*MockClient)(nil).AbortTx), ctx, id, options)
}

// AddMember mocks base method.
func (m *MockClient) AddMember(ctx context.Context, group, member string, options *yt.AddMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockClientMockRecorder) AddMember(ctx, group, member, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockClient)(nil).AddMember), ctx, group, member, options)
}

// AlterTable mocks base method.
func (m *MockClient) AlterTable(ctx context.Context, path ypath.Path, options *yt.AlterTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTable indicates an expected call of AlterTable.
func (mr *MockClientMockRecorder) AlterTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTable", reflect.TypeOf((*MockClient)(nil).AlterTable), ctx, path, options)
}

// AlterTableReplica mocks base method.
func (m *MockClient) AlterTableReplica(ctx context.Context, id yt.NodeID, options *yt.AlterTableReplicaOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTableReplica", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTableReplica indicates an expected call of AlterTableReplica.
func (mr *MockClientMockRecorder) AlterTableReplica(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTableReplica", reflect.TypeOf((*MockClient)(nil).AlterTableReplica), ctx, id, options)
}

// BeginTabletTx mocks base method.
func (m *MockClient) BeginTabletTx(ctx context.Context, options *yt.StartTabletTxOptions) (yt.TabletTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTabletTx", ctx, options)
	ret0, _ := ret[0].(yt.TabletTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTabletTx indicates an expected call of BeginTabletTx.
func (mr *MockClientMockRecorder) BeginTabletTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTabletTx", reflect.TypeOf((*MockClient)(nil).BeginTabletTx), ctx, options)
}

// BeginTx mocks base method.
func (m *MockClient) BeginTx(ctx context.Context, options *yt.StartTxOptions) (yt.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(yt.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockClientMockRecorder) BeginTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockClient)(nil).BeginTx), ctx, options)
}

// CheckPermission mocks base method.
func (m *MockClient) CheckPermission(ctx context.Context, user string, permission yt.Permission, path ypath.YPath, options *yt.CheckPermissionOptions) (*yt.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, user, permission, path, options)
	ret0, _ := ret[0].(*yt.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockClientMockRecorder) CheckPermission(ctx, user, permission, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockClient)(nil).CheckPermission), ctx, user, permission, path, options)
}

// CommitTx mocks base method.
func (m *MockClient) CommitTx(ctx context.Context, id yt.TxID, options *yt.CommitTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockClientMockRecorder) CommitTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockClient)(nil).CommitTx), ctx, id, options)
}

// CompleteOperation mocks base method.
func (m *MockClient) CompleteOperation(ctx context.Context, opID yt.OperationID, options *yt.CompleteOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOperation indicates an expected call of CompleteOperation.
func (mr *MockClientMockRecorder) CompleteOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOperation", reflect.TypeOf((*MockClient)(nil).CompleteOperation), ctx, opID, options)
}

// CopyNode mocks base method.
func (m *MockClient) CopyNode(ctx context.Context, src, dst ypath.YPath, options *yt.CopyNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyNode indicates an expected call of CopyNode.
func (mr *MockClientMockRecorder) CopyNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyNode", reflect.TypeOf((*MockClient)(nil).CopyNode), ctx, src, dst, options)
}

// CreateNode mocks base method.
func (m *MockClient) CreateNode(ctx context.Context, path ypath.YPath, typ yt.NodeType, options *yt.CreateNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, path, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockClientMockRecorder) CreateNode(ctx, path, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockClient)(nil).CreateNode), ctx, path, typ, options)
}

// CreateObject mocks base method.
func (m *MockClient) CreateObject(ctx context.Context, typ yt.NodeType, options *yt.CreateObjectOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockClientMockRecorder) CreateObject(ctx, typ, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockClient)(nil).CreateObject), ctx, typ, options)
}

// DeleteRows mocks base method.
func (m *MockClient) DeleteRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.DeleteRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRows", ctx, path, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRows indicates an expected call of DeleteRows.
func (mr *MockClientMockRecorder) DeleteRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRows", reflect.TypeOf((*MockClient)(nil).DeleteRows), ctx, path, keys, options)
}

// DestroyChunkLocations mocks base method.
func (m *MockClient) DestroyChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.DestroyChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.DestroyChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyChunkLocations indicates an expected call of DestroyChunkLocations.
func (mr *MockClientMockRecorder) DestroyChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyChunkLocations", reflect.TypeOf((*MockClient)(nil).DestroyChunkLocations), ctx, nodeAddress, locationUuids)
}

// DisableChunkLocations mocks base method.
func (m *MockClient) DisableChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.DisableChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.DisableChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableChunkLocations indicates an expected call of DisableChunkLocations.
func (mr *MockClientMockRecorder) DisableChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableChunkLocations", reflect.TypeOf((*MockClient)(nil).DisableChunkLocations), ctx, nodeAddress, locationUuids)
}

// FreezeTable mocks base method.
func (m *MockClient) FreezeTable(ctx context.Context, path ypath.Path, options *yt.FreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreezeTable indicates an expected call of FreezeTable.
func (mr *MockClientMockRecorder) FreezeTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeTable", reflect.TypeOf((*MockClient)(nil).FreezeTable), ctx, path, options)
}

// GenerateTimestamp mocks base method.
func (m *MockClient) GenerateTimestamp(ctx context.Context, options *yt.GenerateTimestampOptions) (yt.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestamp", ctx, options)
	ret0, _ := ret[0].(yt.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTimestamp indicates an expected call of GenerateTimestamp.
func (mr *MockClientMockRecorder) GenerateTimestamp(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestamp", reflect.TypeOf((*MockClient)(nil).GenerateTimestamp), ctx, options)
}

// GetFileFromCache mocks base method.
func (m *MockClient) GetFileFromCache(ctx context.Context, md5 string, options *yt.GetFileFromCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromCache", ctx, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromCache indicates an expected call of GetFileFromCache.
func (mr *MockClientMockRecorder) GetFileFromCache(ctx, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromCache", reflect.TypeOf((*MockClient)(nil).GetFileFromCache), ctx, md5, options)
}

// GetInSyncReplicas mocks base method.
func (m *MockClient) GetInSyncReplicas(ctx context.Context, path ypath.Path, ts yt.Timestamp, keys []interface{}, options *yt.GetInSyncReplicasOptions) ([]yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInSyncReplicas", ctx, path, ts, keys, options)
	ret0, _ := ret[0].([]yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInSyncReplicas indicates an expected call of GetInSyncReplicas.
func (mr *MockClientMockRecorder) GetInSyncReplicas(ctx, path, ts, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInSyncReplicas", reflect.TypeOf((*MockClient)(nil).GetInSyncReplicas), ctx, path, ts, keys, options)
}

// GetJobStderr mocks base method.
func (m *MockClient) GetJobStderr(ctx context.Context, opID yt.OperationID, jobID yt.JobID, options *yt.GetJobStderrOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStderr", ctx, opID, jobID, options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStderr indicates an expected call of GetJobStderr.
func (mr *MockClientMockRecorder) GetJobStderr(ctx, opID, jobID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStderr", reflect.TypeOf((*MockClient)(nil).GetJobStderr), ctx, opID, jobID, options)
}

// GetNode mocks base method.
func (m *MockClient) GetNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockClientMockRecorder) GetNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockClient)(nil).GetNode), ctx, path, result, options)
}

// GetOperation mocks base method.
func (m *MockClient) GetOperation(ctx context.Context, opID yt.OperationID, options *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, opID, options)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockClientMockRecorder) GetOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockClient)(nil).GetOperation), ctx, opID, options)
}

// InsertRowBatch mocks base method.
func (m *MockClient) InsertRowBatch(ctx context.Context, path ypath.Path, rowBatch yt.RowBatch, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowBatch", ctx, path, rowBatch, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowBatch indicates an expected call of InsertRowBatch.
func (mr *MockClientMockRecorder) InsertRowBatch(ctx, path, rowBatch, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowBatch", reflect.TypeOf((*MockClient)(nil).InsertRowBatch), ctx, path, rowBatch, options)
}

// InsertRows mocks base method.
func (m *MockClient) InsertRows(ctx context.Context, path ypath.Path, rows []interface{}, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRows", ctx, path, rows, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRows indicates an expected call of InsertRows.
func (mr *MockClientMockRecorder) InsertRows(ctx, path, rows, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRows", reflect.TypeOf((*MockClient)(nil).InsertRows), ctx, path, rows, options)
}

// LinkNode mocks base method.
func (m *MockClient) LinkNode(ctx context.Context, target, link ypath.YPath, options *yt.LinkNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNode", ctx, target, link, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNode indicates an expected call of LinkNode.
func (mr *MockClientMockRecorder) LinkNode(ctx, target, link, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNode", reflect.TypeOf((*MockClient)(nil).LinkNode), ctx, target, link, options)
}

// ListJobs mocks base method.
func (m *MockClient) ListJobs(ctx context.Context, opID yt.OperationID, options *yt.ListJobsOptions) (*yt.ListJobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, opID, options)
	ret0, _ := ret[0].(*yt.ListJobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockClientMockRecorder) ListJobs(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockClient)(nil).ListJobs), ctx, opID, options)
}

// ListNode mocks base method.
func (m *MockClient) ListNode(ctx context.Context, path ypath.YPath, result interface{}, options *yt.ListNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNode indicates an expected call of ListNode.
func (mr *MockClientMockRecorder) ListNode(ctx, path, result, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockClient)(nil).ListNode), ctx, path, result, options)
}

// ListOperations mocks base method.
func (m *MockClient) ListOperations(ctx context.Context, options *yt.ListOperationsOptions) (*yt.ListOperationsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", ctx, options)
	ret0, _ := ret[0].(*yt.ListOperationsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockClientMockRecorder) ListOperations(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockClient)(nil).ListOperations), ctx, options)
}

// LocateSkynetShare mocks base method.
func (m *MockClient) LocateSkynetShare(ctx context.Context, path ypath.YPath, options *yt.LocateSkynetShareOptions) (yt.ShareLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateSkynetShare", ctx, path, options)
	ret0, _ := ret[0].(yt.ShareLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateSkynetShare indicates an expected call of LocateSkynetShare.
func (mr *MockClientMockRecorder) LocateSkynetShare(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateSkynetShare", reflect.TypeOf((*MockClient)(nil).LocateSkynetShare), ctx, path, options)
}

// LockRows mocks base method.
func (m *MockClient) LockRows(ctx context.Context, path ypath.Path, locks []string, lockType yt.LockType, keys []interface{}, options *yt.LockRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRows", ctx, path, locks, lockType, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRows indicates an expected call of LockRows.
func (mr *MockClientMockRecorder) LockRows(ctx, path, locks, lockType, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRows", reflect.TypeOf((*MockClient)(nil).LockRows), ctx, path, locks, lockType, keys, options)
}

// LookupRows mocks base method.
func (m *MockClient) LookupRows(ctx context.Context, path ypath.Path, keys []interface{}, options *yt.LookupRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRows", ctx, path, keys, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRows indicates an expected call of LookupRows.
func (mr *MockClientMockRecorder) LookupRows(ctx, path, keys, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRows", reflect.TypeOf((*MockClient)(nil).LookupRows), ctx, path, keys, options)
}

// MountTable mocks base method.
func (m *MockClient) MountTable(ctx context.Context, path ypath.Path, options *yt.MountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountTable indicates an expected call of MountTable.
func (mr *MockClientMockRecorder) MountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountTable", reflect.TypeOf((*MockClient)(nil).MountTable), ctx, path, options)
}

// MoveNode mocks base method.
func (m *MockClient) MoveNode(ctx context.Context, src, dst ypath.YPath, options *yt.MoveNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveNode indicates an expected call of MoveNode.
func (mr *MockClientMockRecorder) MoveNode(ctx, src, dst, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveNode", reflect.TypeOf((*MockClient)(nil).MoveNode), ctx, src, dst, options)
}

// MultisetAttributes mocks base method.
func (m *MockClient) MultisetAttributes(ctx context.Context, path ypath.YPath, attributes map[string]interface{}, options *yt.MultisetAttributesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultisetAttributes", ctx, path, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultisetAttributes indicates an expected call of MultisetAttributes.
func (mr *MockClientMockRecorder) MultisetAttributes(ctx, path, attributes, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultisetAttributes", reflect.TypeOf((*MockClient)(nil).MultisetAttributes), ctx, path, attributes, options)
}

// NewRowBatchWriter mocks base method.
func (m *MockClient) NewRowBatchWriter() yt.RowBatchWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRowBatchWriter")
	ret0, _ := ret[0].(yt.RowBatchWriter)
	return ret0
}

// NewRowBatchWriter indicates an expected call of NewRowBatchWriter.
func (mr *MockClientMockRecorder) NewRowBatchWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRowBatchWriter", reflect.TypeOf((*MockClient)(nil).NewRowBatchWriter))
}

// NodeExists mocks base method.
func (m *MockClient) NodeExists(ctx context.Context, path ypath.YPath, options *yt.NodeExistsOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExists", ctx, path, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExists indicates an expected call of NodeExists.
func (mr *MockClientMockRecorder) NodeExists(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExists", reflect.TypeOf((*MockClient)(nil).NodeExists), ctx, path, options)
}

// PingTx mocks base method.
func (m *MockClient) PingTx(ctx context.Context, id yt.TxID, options *yt.PingTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingTx indicates an expected call of PingTx.
func (mr *MockClientMockRecorder) PingTx(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingTx", reflect.TypeOf((*MockClient)(nil).PingTx), ctx, id, options)
}

// PutFileToCache mocks base method.
func (m *MockClient) PutFileToCache(ctx context.Context, path ypath.YPath, md5 string, options *yt.PutFileToCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToCache", ctx, path, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileToCache indicates an expected call of PutFileToCache.
func (mr *MockClientMockRecorder) PutFileToCache(ctx, path, md5, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToCache", reflect.TypeOf((*MockClient)(nil).PutFileToCache), ctx, path, md5, options)
}

// ReadFile mocks base method.
func (m *MockClient) ReadFile(ctx context.Context, path ypath.YPath, options *yt.ReadFileOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockClientMockRecorder) ReadFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockClient)(nil).ReadFile), ctx, path, options)
}

// ReadTable mocks base method.
func (m *MockClient) ReadTable(ctx context.Context, path ypath.YPath, options *yt.ReadTableOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTable indicates an expected call of ReadTable.
func (mr *MockClientMockRecorder) ReadTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTable", reflect.TypeOf((*MockClient)(nil).ReadTable), ctx, path, options)
}

// RemountTable mocks base method.
func (m *MockClient) RemountTable(ctx context.Context, path ypath.Path, options *yt.RemountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemountTable indicates an expected call of RemountTable.
func (mr *MockClientMockRecorder) RemountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemountTable", reflect.TypeOf((*MockClient)(nil).RemountTable), ctx, path, options)
}

// RemoveMember mocks base method.
func (m *MockClient) RemoveMember(ctx context.Context, group, member string, options *yt.RemoveMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockClientMockRecorder) RemoveMember(ctx, group, member, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockClient)(nil).RemoveMember), ctx, group, member, options)
}

// RemoveNode mocks base method.
func (m *MockClient) RemoveNode(ctx context.Context, path ypath.YPath, options *yt.RemoveNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockClientMockRecorder) RemoveNode(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockClient)(nil).RemoveNode), ctx, path, options)
}

// ReshardTable mocks base method.
func (m *MockClient) ReshardTable(ctx context.Context, path ypath.Path, options *yt.ReshardTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReshardTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReshardTable indicates an expected call of ReshardTable.
func (mr *MockClientMockRecorder) ReshardTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReshardTable", reflect.TypeOf((*MockClient)(nil).ReshardTable), ctx, path, options)
}

// ResumeOperation mocks base method.
func (m *MockClient) ResumeOperation(ctx context.Context, opID yt.OperationID, options *yt.ResumeOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeOperation indicates an expected call of ResumeOperation.
func (mr *MockClientMockRecorder) ResumeOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeOperation", reflect.TypeOf((*MockClient)(nil).ResumeOperation), ctx, opID, options)
}

// ResurrectChunkLocations mocks base method.
func (m *MockClient) ResurrectChunkLocations(ctx context.Context, nodeAddress string, locationUuids []guid.GUID) (*yt.ResurrectChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResurrectChunkLocations", ctx, nodeAddress, locationUuids)
	ret0, _ := ret[0].(*yt.ResurrectChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResurrectChunkLocations indicates an expected call of ResurrectChunkLocations.
func (mr *MockClientMockRecorder) ResurrectChunkLocations(ctx, nodeAddress, locationUuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResurrectChunkLocations", reflect.TypeOf((*MockClient)(nil).ResurrectChunkLocations), ctx, nodeAddress, locationUuids)
}

// SelectRows mocks base method.
func (m *MockClient) SelectRows(ctx context.Context, query string, options *yt.SelectRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRows", ctx, query, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRows indicates an expected call of SelectRows.
func (mr *MockClientMockRecorder) SelectRows(ctx, query, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRows", reflect.TypeOf((*MockClient)(nil).SelectRows), ctx, query, options)
}

// SetNode mocks base method.
func (m *MockClient) SetNode(ctx context.Context, path ypath.YPath, value interface{}, options *yt.SetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNode", ctx, path, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNode indicates an expected call of SetNode.
func (mr *MockClientMockRecorder) SetNode(ctx, path, value, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNode", reflect.TypeOf((*MockClient)(nil).SetNode), ctx, path, value, options)
}

// StartOperation mocks base method.
func (m *MockClient) StartOperation(ctx context.Context, opType yt.OperationType, spec interface{}, options *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", ctx, opType, spec, options)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockClientMockRecorder) StartOperation(ctx, opType, spec, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockClient)(nil).StartOperation), ctx, opType, spec, options)
}

// StartTabletTx mocks base method.
func (m *MockClient) StartTabletTx(ctx context.Context, options *yt.StartTabletTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTabletTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTabletTx indicates an expected call of StartTabletTx.
func (mr *MockClientMockRecorder) StartTabletTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTabletTx", reflect.TypeOf((*MockClient)(nil).StartTabletTx), ctx, options)
}

// StartTx mocks base method.
func (m *MockClient) StartTx(ctx context.Context, options *yt.StartTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockClientMockRecorder) StartTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockClient)(nil).StartTx), ctx, options)
}

// Stop mocks base method.
func (m *MockClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// SuspendOperation mocks base method.
func (m *MockClient) SuspendOperation(ctx context.Context, opID yt.OperationID, options *yt.SuspendOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendOperation indicates an expected call of SuspendOperation.
func (mr *MockClientMockRecorder) SuspendOperation(ctx, opID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendOperation", reflect.TypeOf((*MockClient)(nil).SuspendOperation), ctx, opID, options)
}

// TransferAccountResources mocks base method.
func (m *MockClient) TransferAccountResources(ctx context.Context, srcAccount, dstAccount string, resourceDelta interface{}, options *yt.TransferAccountResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAccountResources", ctx, srcAccount, dstAccount, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAccountResources indicates an expected call of TransferAccountResources.
func (mr *MockClientMockRecorder) TransferAccountResources(ctx, srcAccount, dstAccount, resourceDelta, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAccountResources", reflect.TypeOf((*MockClient)(nil).TransferAccountResources), ctx, srcAccount, dstAccount, resourceDelta, options)
}

// TransferPoolResources mocks base method.
func (m *MockClient) TransferPoolResources(ctx context.Context, srcPool, dstPool, poolTree string, resourceDelta interface{}, options *yt.TransferPoolResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPoolResources", ctx, srcPool, dstPool, poolTree, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPoolResources indicates an expected call of TransferPoolResources.
func (mr *MockClientMockRecorder) TransferPoolResources(ctx, srcPool, dstPool, poolTree, resourceDelta, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPoolResources", reflect.TypeOf((*MockClient)(nil).TransferPoolResources), ctx, srcPool, dstPool, poolTree, resourceDelta, options)
}

// UnfreezeTable mocks base method.
func (m *MockClient) UnfreezeTable(ctx context.Context, path ypath.Path, options *yt.UnfreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfreezeTable indicates an expected call of UnfreezeTable.
func (mr *MockClientMockRecorder) UnfreezeTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeTable", reflect.TypeOf((*MockClient)(nil).UnfreezeTable), ctx, path, options)
}

// UnmountTable mocks base method.
func (m *MockClient) UnmountTable(ctx context.Context, path ypath.Path, options *yt.UnmountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountTable indicates an expected call of UnmountTable.
func (mr *MockClientMockRecorder) UnmountTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountTable", reflect.TypeOf((*MockClient)(nil).UnmountTable), ctx, path, options)
}

// UpdateOperationParameters mocks base method.
func (m *MockClient) UpdateOperationParameters(ctx context.Context, opID yt.OperationID, params interface{}, options *yt.UpdateOperationParametersOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationParameters", ctx, opID, params, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationParameters indicates an expected call of UpdateOperationParameters.
func (mr *MockClientMockRecorder) UpdateOperationParameters(ctx, opID, params, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationParameters", reflect.TypeOf((*MockClient)(nil).UpdateOperationParameters), ctx, opID, params, options)
}

// WriteFile mocks base method.
func (m *MockClient) WriteFile(ctx context.Context, path ypath.YPath, options *yt.WriteFileOptions) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, path, options)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockClientMockRecorder) WriteFile(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockClient)(nil).WriteFile), ctx, path, options)
}

// WriteTable mocks base method.
func (m *MockClient) WriteTable(ctx context.Context, path ypath.YPath, options *yt.WriteTableOptions) (yt.TableWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTable indicates an expected call of WriteTable.
func (mr *MockClientMockRecorder) WriteTable(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTable", reflect.TypeOf((*MockClient)(nil).WriteTable), ctx, path, options)
}
